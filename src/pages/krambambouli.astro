---
import Layout from "../layouts/Layout.astro";
import RepeatOnce from "../svgs/Repeat-once.astro";
import Cookbook from "../svgs/Cookbook.astro";
import Medicine from "../svgs/Medicine.astro";
import Expertise from "../svgs/Expertise.astro";
import Wine from "../svgs/Wine.astro";
import Cooking from "../svgs/Cooking.astro";
import { apiRoutes } from "../lib/routes";
import type {
    PickUpLocation,
    DeliveryLocation,
    ProductInterface,
} from "../lib/store";
import { Product, Price } from "../lib/store";
import type { Activity } from "../lib/activity";
import KrambambouliForm from "../components/krambambouli-form/KrambambouliForm";

const title = "Krambambouli";
const formActive = true;
const origin = Astro.url.origin;
const [products, pickupLocations, deliveryLocations, krambambouliCantus]: [
    Product[],
    PickUpLocation[],
    DeliveryLocation[],
    Activity,
] = await Promise.all([
    fetch(
        [
            origin,
            apiRoutes.store.url,
            apiRoutes.store.products.url,
            apiRoutes.store.products.krambambouli.url,
        ].join(""),
    )
        .then((response) => {
            if (response.ok) {
                return response.json();
            } else throw Error();
        })
        .then((data: ProductInterface[]) => {
            return data.map(
                (el: ProductInterface) =>
                    new Product(
                        el.id,
                        el.name,
                        new Price(el.price.euros, el.price.cents),
                        el.description ? el.description : undefined,
                        el.imageUrl,
                    ),
            );
        }),
    fetch(
        [
            origin,
            apiRoutes.krambambouli.url,
            apiRoutes.krambambouli.pickup.url,
        ].join(""),
    ).then((response) => response),
    fetch(
        [
            origin,
            apiRoutes.krambambouli.url,
            apiRoutes.krambambouli.delivery.url,
        ].join(""),
    ).then((response) => response),
    fetch(
        [
            origin,
            apiRoutes.krambambouli.url,
            apiRoutes.krambambouli.cantus.url,
        ].join(""),
    ).then((response) => response),
]);

products.map((p) => {
    console.log(p.price.toString());
});
---

<Layout title={title}>
    <main>
        <picture class="brouwers-image-container">
            <img
                src="banner.jpg"
                alt="brouwers aan het werk"
                class="brouwers"
            />
        </picture>
        <ul class="intro-text">
            <li class="row-container">
                <Cookbook />
                <p>
                    Krambambouli is een drank op basis van wijn, rum, karamel,
                    kaneel en een heleboel geheime ingrediÃ«nten.
                </p>
            </li>
            <li class="row-container">
                <RepeatOnce />
                <p>
                    Wordt 1 maal per jaar op een speciale 'Krambamboulikneipe'
                    bereid, volgens een even vast als uitgebreid ritueel.
                </p>
            </li>
            <li class="row-container">
                <Expertise />
                <p>Wordt met liefde en expertise door 't VAT gebrouwen.</p>
            </li>
            <li class="row-container">
                <Wine />
                <p>
                    Bevat meer dan 20% procent alcohol en wordt meestal warm
                    gedronken.
                </p>
            </li>
            <li class="row-container">
                <Cooking />
                <p>
                    Kan ook gebruikt worden om al uw sauzen op smaak te brengen.
                </p>
            </li>
            <li class="row-container">
                <Medicine />
                <p>De ideale drank bij verkoudheden en andere kwaaltjes.</p>
            </li>
        </ul>
        {
            formActive && (
                <KrambambouliForm
                    client:visible
                    products={products}
                    deliveryLocations={deliveryLocations}
                    pickUpLocations={pickupLocations}
                    krambambouliCantus={krambambouliCantus}
                />
            )
        }

        <style>
            main {
                padding: var(--standard-padding)
                    calc(var(--standard-padding) * 3);
                display: flex;
                flex-direction: column;
                gap: 2rem;
            }

            .brouwers-image-container {
                display: flex;
                justify-content: center;
            }

            .brouwers {
                width: 90%;
            }

            .intro-text {
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }

            .row-container {
                display: grid;
                grid-template-columns: 1.5rem auto;
                align-items: center;
                gap: calc(1rem / 2);
            }

            .row-container > p {
                font-size: 1rem;
            }
        </style>
    </main>
</Layout>
