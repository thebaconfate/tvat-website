---
import Layout from "../../layouts/Layout.astro";
import { readFile } from "fs/promises";
import { BoardYear, type BoardYearInterface } from "../../lib/board/board-year";
import { boardRoleOrder } from "../../lib/board/board-role";
import BoardMemberComponent from "../../components/board/board-member/BoardMemberComponent.astro";
import { sortByTerm } from "../../lib/board/board-year";
import { websiteRoutes } from "../../lib/routes";

export const prerender = true;
export async function getStaticPaths() {
  const jsonString = await readFile("./public/boards.json", "utf-8");
  const data: BoardYearInterface[] = JSON.parse(jsonString);
  const terms = data.map((d) => d.term).toSorted(sortByTerm);
  return data.map((d) => {
    return {
      params: { term: d.term },
      props: { boardYear: new BoardYear(d), terms: terms },
    };
  });
}
const title = "Bestuur";

const { term } = Astro.params;
const { boardYear, terms } = Astro.props;
boardYear.boardMembers.sort((a, b) => {
  const r =
    boardRoleOrder.indexOf(a.boardRole) - boardRoleOrder.indexOf(b.boardRole);
  if (r === 0) return a.name.localeCompare(b.name);
  else return r;
});
const index = terms.indexOf(term);
const isLast = index === terms.length - 1;
const isFirst = index === 0;
function createHref(term: string) {
  const parts = websiteRoutes.board.url.split("/");
  parts[parts.length - 1] = term;
  return parts.join("/");
}
const navigatinContainerStyle = isFirst
  ? "flex-end"
  : isLast
    ? "flex-start"
    : "space-between";
---

<Layout title={title}>
  <h1 class="term">{term}</h1>
  <div class=`boardyears-navigation-container ${navigatinContainerStyle}`>
    {
      !isFirst && (
        <input
          class="boardyears-navigation"
          type="button"
          onclick={`window.location.href='${createHref(terms[index - 1])}'`}
          value={terms[index - 1]}
        />
      )
    }
    {
      !isLast && (
        <input
          class="boardyears-navigation"
          type="button"
          onclick={`window.location.href='${createHref(terms[index + 1])}'`}
          value={terms[index + 1]}
        />
      )
    }
  </div>
</Layout>
<div class="board-container">
  {
    boardYear.boardMembers.map((m, index) => (
      <BoardMemberComponent boardMember={m} term={term} index={index} />
    ))
  }
</div>
<style>
  .board-container {
    padding-top: 2rem;
    padding-bottom: 2rem;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    margin: 0 auto;
    row-gap: 2rem;
    align-items: end;
  }

  .term {
    margin-top: 2rem;
    display: flex;
    justify-content: center;
  }
  .boardyears-navigation-container {
    display: flex;
    margin-top: 1rem;
    margin-bottom: 1rem;
    margin-left: 10%;
    margin-right: 10%;
  }
  .boardyears-navigation {
    padding: 0.5rem;
  }

  .space-between {
    justify-content: space-between;
  }

  .flex-start {
    justify-content: flex-start;
  }

  .flex-end {
    justify-content: flex-end;
  }

  @media (min-width: 768px) {
    .board-container {
      column-gap: 5rem;
    }
  }

  @media (min-width: 1024px) {
    .board-container {
      column-gap: 7rem;
    }
  }
</style>
